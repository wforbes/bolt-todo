[["/home/project/lib/db.ts","import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nexport async function connectToDatabase() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    cached.promise = null;\n    throw e;\n  }\n\n  return cached.conn;\n}"],["/home/project/app/api/auth/[...nextauth]/route.ts","import NextAuth from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/models/User';\nimport bcrypt from 'bcryptjs';\n\nconst handler = NextAuth({\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error('Please enter an email and password');\n        }\n\n        await connectToDatabase();\n        const user = await User.findOne({ email: credentials.email });\n\n        if (!user || !user.password) {\n          throw new Error('No user found with this email');\n        }\n\n        const isPasswordCorrect = await bcrypt.compare(credentials.password, user.password);\n\n        if (!isPasswordCorrect) {\n          throw new Error('Invalid credentials');\n        }\n\n        return {\n          id: user._id.toString(),\n          email: user.email,\n          name: user.name,\n        };\n      }\n    })\n  ],\n  session: {\n    strategy: 'jwt',\n  },\n  pages: {\n    signIn: '/auth/signin',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n      }\n      return session;\n    },\n  },\n});\n\nexport { handler as GET, handler as POST };"],["/home/project/app/api/auth/signup/route.ts","import { NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/models/User';\n\nexport async function POST(req: Request) {\n  try {\n    const { name, email, password } = await req.json();\n\n    await connectToDatabase();\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return NextResponse.json({ message: 'User already exists' }, { status: 400 });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    const newUser = new User({\n      name,\n      email,\n      password: hashedPassword,\n    });\n\n    await newUser.save();\n\n    return NextResponse.json({ message: 'User created successfully' }, { status: 201 });\n  } catch (error) {\n    console.error('Signup error:', error);\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\n  }\n}"]]